name: Lint Go
description: 'Runs code quality checks for Go projects using golangci-lint'
author: 'Moonrise Labs'

branding:
  icon: 'check-circle'
  color: 'blue'

inputs:
  skip-go-setup:
    description: 'Whether to skip the Go setup step'
    default: 'false'
    required: false
  skip-just-setup:
    description: 'Whether to skip the Just setup step'
    default: 'false'
    required: false
  use-just:
    description: 'Whether to use Just to run linting'
    default: 'false'
    required: false
  just-command:
    description: 'The Just command to run Go linting'
    default: 'lint-go'
    required: false
  golangci-lint-version:
    description: 'Version of golangci-lint to use'
    default: 'v1.64'
    required: false
  golangci-lint-args:
    description: 'Additional arguments to pass to golangci-lint'
    default: ''
    required: false
  use-workspace:
    description: 'Whether to use the Go workspace directory'
    default: 'true'
    required: false
  working-directory:
    description: 'Directory to run linting in (defaults to auto-detected Go module)'
    default: ''
    required: false

runs:
  using: composite
  steps:
    - name: Setup Go
      if: ${{ inputs.skip-go-setup != 'true' }}
      uses: moonrise-labs/github-actions/actions/setup-go@main

    - name: Setup Just
      if: ${{ inputs.skip-just-setup != 'true' && inputs.use-just == 'true' }}
      uses: moonrise-labs/github-actions/actions/setup-just@main

    - name: Detect Go Modules
      id: detect-modules
      if: ${{ inputs.use-workspace == 'true' && inputs.use-just != 'true' }}
      shell: bash
      run: echo "modules=$(go list -m -json | jq -s '.' | jq -c '[.[].Dir]')" >> $GITHUB_OUTPUT

    # Just-based linting

    - name: Run Linting with Just for workspace
      if: ${{ inputs.use-just == 'true' && inputs.use-workspace == 'true' }}
      shell: bash
      run: |
        DIRS=$(go list -m -json | jq -s '.' | jq -r '.[].Dir')
        for dir in $DIRS; do
          just ${{ inputs.just-command }} $dir ${{ inputs.golangci-lint-args }}
        done

    - name: Run Linting with Just for single directory
      if: ${{ inputs.use-just == 'true' && inputs.use-workspace != 'true' }}
      shell: bash
      working-directory: ${{ inputs.working-directory != '' && inputs.working-directory || '.' }}
      run: just ${{ inputs.just-command }} ${{ inputs.golangci-lint-args }}

    # Direct linting

    - name: Run golangci-lint for workspace
      if: ${{ inputs.use-just != 'true' && inputs.use-workspace == 'true' }}
      uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6
      with:
        version: ${{ inputs.golangci-lint-version }}
        working-directory: ${{ fromJSON(steps.detect-modules.outputs.modules)[0] }}
        args: ${{ inputs.golangci-lint-args }}

    - name: Run golangci-lint for single directory
      if: ${{ inputs.use-just != 'true' && inputs.use-workspace != 'true' }}
      uses: golangci/golangci-lint-action@971e284b6050e8a5849b72094c50ab08da042db8 # v6
      with:
        version: ${{ inputs.golangci-lint-version }}
        working-directory: ${{ inputs.working-directory }}
        args: ${{ inputs.golangci-lint-args }}